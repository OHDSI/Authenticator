authenticator:
  methods:
    db:
      service: org.ohdsi.authenticator.service.jdbc.JdbcAuthService
      config:
        jdbcUrl: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
        username: sa
        password:
        query: SELECT password, first_name, middle_name, last_name FROM USERS WHERE USERNAME = :username
        passwordEncoder: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder
        fieldsToExtract:
          firstName: FIRST_NAME
          middleName: MIDDLE_NAME
          lastName: LAST_NAME
    rest-arachne:
      service: org.ohdsi.authenticator.service.rest.RestAuthService
      config:
        url: https://www.arachnenetwork.com/api/v1/auth/login
        bodyFormat: JSON
        params:
          username: username
          password: password
        loginSuccessCriteria:
          status: OK
          bodyProperty: '$[?(@.errorCode == 0)]'
        token:
          source: BODY
          key: $.result.token
          targetHeader: Arachne-Auth-Token
          targetFormat: '%s'
          copyExpirationDate: true
        infoUrl: https://www.arachnenetwork.com/api/v1/auth/me
        fieldsToExtract:
          firstName: result.firstname
          middleName: result.middlename
          lastName: result.lastname
        refresh:
          url: https://www.arachnenetwork.com/api/v1/auth/refresh
          source: BODY
          key: $.result
    rest-atlas:
      service: org.ohdsi.authenticator.service.rest.RestAuthService
      config:
        url: https://qaatlas.arachnenetwork.com/WebAPI/user/login/db
        bodyFormat: FORMDATA
        params:
          login: username
          password: password
        loginSuccessCriteria:
          status: OK
          bodyProperty: '$[?(@.permissions)]'
        token:
          source: HEADERS
          key: Bearer
          targetHeader: Authorization
          targetFormat: 'Bearer %s'
        infoUrl: https://qaatlas.arachnenetwork.com/WebAPI/user/me
        fieldsToExtract:
          name: name
    github:
      service: org.ohdsi.authenticator.service.github.GithubAuthService
      config:
        # apiKey:
        # apiSecret:
        scope: user:email
        callbackUrl: http://localhost:8080/authentication/login
        usernameProperty: email
        fieldsToExtract:
          firstName: name.split(' ')[0]
          lastName: name.split(' ')[1]
    ldap:
      service: org.ohdsi.authenticator.service.directory.ldap.LdapAuthService
      config:
        baseDn: ou=users,dc=example,dc=com
        userDn: uid=admin,ou=system
        password: secret
        url: ldap://localhost:8389
        searchFilter: uid={0}
        countLimit: 0
        ignorePartialResultException: true
        fieldsToExtract:
          firstName: displayName
          lastName: sn
    ad:
      service: org.ohdsi.authenticator.service.directory.ad.AdAuthService
      config:
        baseDn: DC=example,DC=com
        # Both formats works for AD either sAMAccountName (with or w/o domainSuffix) and distingueshedName
        #userDn: administrator
        userDn: CN=Administrator,OU=Users,DC=example,DC=com
        password: secret
        domainSuffix: example.com
        url: ldap://localhost:9389
        # For real AD userPrincipalName attribute should be used
        #searchFilter: userPrincipalName={0}
        searchFilter: uid={0}
        ignorePartialResultException: true
        fieldsToExtract:
          firstName: givenName
          lastName: sn
security:
  jwt:
    token:
      secretKey: 129DF19C8A91AFD8375A2826A33539K01ACQ778QOJFAA9MGWLWH73PLXVFVHBR7860MTIE2O8EEVF9KCO77P6A7NUNX4XHAGCRFSBWG879XPDOIN6C2LFCKJI002OIABS4D6Q9VMJJIX8UCE48EF
      validityInSeconds: 60
